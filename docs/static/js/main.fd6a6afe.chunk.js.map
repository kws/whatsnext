{"version":3,"sources":["authConfig.js","utils/MsGraphApiCall.js","components/calendar.js","App.js","index.js"],"names":["ua","window","navigator","userAgent","loginRequest","indexOf","scopes","d","Date","setHours","setMinutes","setSeconds","start","toISOString","setDate","getDate","end","graphConfig","graphMeEndpoint","a","account","msalInstance","getActiveAccount","Error","acquireTokenSilent","response","headers","Headers","bearer","accessToken","append","options","method","fetch","then","json","catch","error","console","log","Calendar","inProgress","useMsal","useState","graphData","setGraphData","useEffect","InteractionStatus","None","callMsGraph","events","value","sort","b","dateTime","localeCompare","map","event","toLocaleTimeString","subject","App","instance","accounts","length","onClick","logout","loginPopup","PublicClientApplication","auth","clientId","getAllAccounts","setActiveAccount","addEventCallback","eventType","EventType","LOGIN_SUCCESS","payload","AppProvider","ReactDOM","render","document","getElementById"],"mappings":"wOAIMA,EAAKC,OAAOC,UAAUC,UA+CfC,GA9CAJ,EAAGK,QAAQ,SACTL,EAAGK,QAAQ,YACXL,EAAGK,QAAQ,SACVL,EAAGK,QAAQ,WA2CC,CACxBC,OAAQ,CAAC,YAAa,oBAGpBC,EAAI,IAAIC,KACdD,EAAEE,SAAS,GACXF,EAAEG,WAAW,GACbH,EAAEI,WAAW,GAEb,IAAMC,EAAML,EAAEM,cAEdN,EAAEO,QAAQP,EAAEQ,UAAY,GAExB,IAAMC,EAAIT,EAAEM,cAGCI,EAAc,CACvBC,gBAAgB,2EAAD,OAA6EN,EAA7E,wBAAkGI,I,0ECjE9G,oCAAAG,EAAA,yDACGC,EAAUC,EAAaC,mBAD1B,sBAGOC,MAAM,6FAHb,uBAMoBF,EAAaG,mBAAb,2BAChBpB,GADgB,IAEnBgB,QAASA,KARV,cAMGK,EANH,OAWGC,EAAU,IAAIC,QACdC,EAZH,iBAYsBH,EAASI,aAElCH,EAAQI,OAAO,gBAAiBF,GAE1BG,EAAU,CACZC,OAAQ,MACRN,QAASA,GAlBV,kBAqBIO,MAAMhB,EAAYC,gBAAiBa,GACrCG,MAAK,SAAAT,GAAQ,OAAIA,EAASU,UAC1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAvB7B,6C,iCCqCQG,EA9BE,WAAO,IACZC,EAAeC,cAAfD,WADW,EAEeE,mBAAS,MAFxB,mBAEZC,EAFY,KAEDC,EAFC,KAInBC,qBAAU,WACFL,IAAeM,IAAkBC,MDZtC,WAAP,+BCaYC,GAAcf,MAAK,SAAAT,GAAQ,OAAIoB,EAAapB,QAEjD,CAACgB,IAGJH,QAAQC,IAAI,YAAaK,GAEzB,IAAMM,EAAUN,GAAaA,EAAUO,MAASP,EAAUO,MAAQ,GAKlE,OAJAD,EAAOE,MAAK,SAACjC,EAAGkC,GAAJ,OAAUlC,EAAEP,MAAM0C,SAASC,cAAcF,EAAEzC,MAAM0C,aAE7DhB,QAAQC,IAAI,SAAUW,GAGlB,6BACKA,EAAOM,KAAI,SAAAC,GACR,OACI,+BAAK,IAAIjD,KAAKiD,EAAM7C,MAAM0C,UAAUI,qBAApC,MAA6DD,EAAME,iBCgBxEC,MAzBR,WAAgB,IAAD,EACyBlB,cAAnCmB,EADU,EACVA,SAAUC,EADA,EACAA,SAAUrB,EADV,EACUA,WAI5B,OAFAH,QAAQC,IAAI,WAAYuB,GAEpBA,EAASC,OAAS,EAEd,qCACI,qDAAwBD,EAASC,OAAjC,wBACA,cAAC,EAAD,IACA,wBAAQC,QAAS,kBAAMH,EAASI,UAAhC,uBAGc,UAAfxB,EACA,mEAGH,qCACI,2EACA,wBAAQuB,QAAS,kBAAMH,EAASK,cAAhC,uBC1BH7C,EAAe,IAAI8C,IAPV,CAClBC,KAAM,CACFC,SAAU,0CAQZP,EAAWzC,EAAaiD,iBAC1BR,EAASC,OAAS,GAClB1C,EAAakD,iBAAiBT,EAAS,IAG3CzC,EAAamD,kBAAiB,SAACf,GAC3B,GAAIA,EAAMgB,YAAcC,IAAUC,eAAiBlB,EAAMmB,QAAQxD,QAAS,CACtE,IAAMA,EAAUqC,EAAMmB,QAAQxD,QAC9BC,EAAakD,iBAAiBnD,OAKtC,IAAMyD,EAAc,kBAChB,cAAC,IAAD,CAAchB,SAAUxC,EAAxB,SACI,cAAC,EAAD,OAKRyD,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.fd6a6afe.chunk.js","sourcesContent":["import { LogLevel } from \"@azure/msal-browser\";\n// Browser check variables\n// If you support IE, our recommendation is that you sign-in using Redirect APIs\n// If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\nconst ua = window.navigator.userAgent;\nconst msie = ua.indexOf(\"MSIE \");\nconst msie11 = ua.indexOf(\"Trident/\");\nconst msedge = ua.indexOf(\"Edge/\");\nconst firefox = ua.indexOf(\"Firefox\");\nconst isIE = msie > 0 || msie11 > 0;\nconst isEdge = msedge > 0;\nconst isFirefox = firefox > 0; // Only needed if you need to support the redirect flow in Firefox incognito\n\n// Config object to be passed to Msal on creation\nexport const msalConfig = {\n    auth: {\n        clientId: \"0a61c279-646b-4055-a5f1-1c3da7f70f18\",\n        redirectUri: \"/\",\n        postLogoutRedirectUri: \"/\"\n    },\n    cache: {\n        storeAuthStateInCookie: isIE || isEdge || isFirefox\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback: (level, message, containsPii) => {\n                if (containsPii) {\n                    return;\n                }\n                switch (level) {\n                    case LogLevel.Error:\n                        console.error(message);\n                        return;\n                    case LogLevel.Info:\n                        console.info(message);\n                        return;\n                    case LogLevel.Verbose:\n                        console.debug(message);\n                        return;\n                    case LogLevel.Warning:\n                        console.warn(message);\n                        return;\n                    default:\n                        return;\n                }\n            }\n        }\n    }\n};\n\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\nexport const loginRequest = {\n    scopes: [\"User.Read\", \"Calendars.Read\"]\n};\n\nconst d = new Date();\nd.setHours(0);\nd.setMinutes(0);\nd.setSeconds(0)\n\nconst start=d.toISOString();\n\nd.setDate(d.getDate() + 1)\n\nconst end=d.toISOString();\n\n// Add here the endpoints for MS Graph API services you would like to use.\nexport const graphConfig = {\n    graphMeEndpoint: `https://graph.microsoft.com/v1.0/me/calendar/calendarView?StartDateTime=${start}&EndDateTime=${end}`\n};","import { loginRequest, graphConfig } from \"../authConfig\";\nimport { msalInstance } from \"../index\";\n\nexport async function callMsGraph() {\n    const account = msalInstance.getActiveAccount();\n    if (!account) {\n        throw Error(\"No active account! Verify a user has been signed in and setActiveAccount has been called.\");\n    }\n\n    const response = await msalInstance.acquireTokenSilent({\n        ...loginRequest,\n        account: account\n    });\n\n    const headers = new Headers();\n    const bearer = `Bearer ${response.accessToken}`;\n\n    headers.append(\"Authorization\", bearer);\n\n    const options = {\n        method: \"GET\",\n        headers: headers\n    };\n\n    return fetch(graphConfig.graphMeEndpoint, options)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}","import React from 'react'\nimport { useEffect, useState } from \"react\";\n\nimport { MsalAuthenticationTemplate, useMsal } from \"@azure/msal-react\";\nimport { InteractionStatus, InteractionType } from \"@azure/msal-browser\";\nimport { loginRequest } from \"../authConfig\";\n\nimport { callMsGraph } from \"../utils/MsGraphApiCall\";\n\n\nconst Calendar = () => {\n    const { inProgress } = useMsal();\n    const [graphData, setGraphData] = useState(null);\n\n    useEffect(() => {\n        if (inProgress === InteractionStatus.None) {\n            callMsGraph().then(response => setGraphData(response));\n        }\n    }, [inProgress]);\n\n\n    console.log(\"GraphData\", graphData);\n\n    const events = (graphData && graphData.value) ? graphData.value : [];\n    events.sort((a, b) => a.start.dateTime.localeCompare(b.start.dateTime))\n\n    console.log(\"events\", events);\n\n    return (\n        <ul>\n            {events.map(event => {\n                return (\n                    <li>{new Date(event.start.dateTime).toLocaleTimeString()} - {event.subject}</li>\n                )\n            })}\n        </ul>\n    )\n\n}\n\nexport default Calendar;","import React from 'react'\nimport { useMsal } from \"@azure/msal-react\";\nimport Calendar from \"./components/calendar\";\n\nfunction callMSGraph(endpoint, token, callback) {\n    const headers = new Headers();\n    const bearer = `Bearer ${token}`;\n\n    headers.append(\"Authorization\", bearer);\n\n    const options = {\n        method: \"GET\",\n        headers: headers\n    };\n\n    console.log('request made to Graph API at: ' + new Date().toString());\n\n    fetch(endpoint, options)\n        .then(response => response.json())\n        .then(response => callback(response, endpoint))\n        .catch(error => console.log(error))\n}\n\nexport function App() {\n    const { instance, accounts, inProgress } = useMsal();\n\n    console.log(\"Accounts\", accounts)\n\n    if (accounts.length > 0) {\n        return (\n            <>\n                <p>There are currently {accounts.length} users signed in! </p>\n                <Calendar />\n                <button onClick={() => instance.logout()}>Logout</button>\n            </>\n        )\n    } else if (inProgress === \"login\") {\n        return <span>Login is currently in progress!</span>\n    } else {\n        return (\n            <>\n                <span>There are currently no users signed in!</span>\n                <button onClick={() => instance.loginPopup()}>Login</button>\n            </>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\n\n// MSAL configuration\nconst configuration = {\n    auth: {\n        clientId: '34a2dfb8-fcb2-4c55-8436-ed03b6b7c683'\n    }\n};\n\n\nexport const msalInstance = new PublicClientApplication(configuration);\n\n// Account selection logic is app dependent. Adjust as needed for different use cases.\nconst accounts = msalInstance.getAllAccounts();\nif (accounts.length > 0) {\n    msalInstance.setActiveAccount(accounts[0]);\n}\n\nmsalInstance.addEventCallback((event) => {\n    if (event.eventType === EventType.LOGIN_SUCCESS && event.payload.account) {\n        const account = event.payload.account;\n        msalInstance.setActiveAccount(account);\n    }\n});\n\n// Component\nconst AppProvider = () => (\n    <MsalProvider instance={msalInstance}>\n        <App />\n    </MsalProvider>\n);\n\n\nReactDOM.render(<AppProvider />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}