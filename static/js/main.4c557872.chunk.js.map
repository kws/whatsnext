{"version":3,"sources":["authConfig.js","utils/MsGraphApiCall.js","components/Event.js","components/Calendar.js","App.js","index.js"],"names":["ua","window","navigator","userAgent","msie","indexOf","msie11","msedge","firefox","msalConfig","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","d","Date","setHours","setMinutes","setSeconds","start","toISOString","setDate","getDate","end","graphConfig","graphMeEndpoint","callMsGraph","a","account","msalInstance","getActiveAccount","acquireTokenSilent","response","headers","Headers","bearer","accessToken","append","options","method","fetch","then","json","catch","log","_0","value","padStart","Event","event","diffInSecs","Math","floor","startinfo","timeDiff","hours","minutes","seconds","timeRep","className","subject","loadAndPrepareData","graphData","events","sort","b","dateTime","localeCompare","map","date","getHours","getMinutes","Calendar","inProgress","useMsal","useState","setEvents","getTime","time","setTime","useEffect","InteractionStatus","None","timer","setInterval","clearInterval","RELOAD_INTERVAL_IN_MINUTES","currentTime","toLocaleTimeString","timeStyle","replace","id","App","instance","accounts","length","onClick","acquireTokenPopup","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","PublicClientApplication","getAllAccounts","setActiveAccount","addEventCallback","eventType","EventType","LOGIN_SUCCESS","payload","AppProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c557872.chunk.js","sourcesContent":["import { LogLevel } from \"@azure/msal-browser\";\n// Browser check variables\n// If you support IE, our recommendation is that you sign-in using Redirect APIs\n// If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\nconst ua = window.navigator.userAgent;\nconst msie = ua.indexOf(\"MSIE \");\nconst msie11 = ua.indexOf(\"Trident/\");\nconst msedge = ua.indexOf(\"Edge/\");\nconst firefox = ua.indexOf(\"Firefox\");\nconst isIE = msie > 0 || msie11 > 0;\nconst isEdge = msedge > 0;\nconst isFirefox = firefox > 0; // Only needed if you need to support the redirect flow in Firefox incognito\n\n// Config object to be passed to Msal on creation\nexport const msalConfig = {\n    auth: {\n        clientId: \"212b434a-82b7-43bb-b48d-c8921a2e939d\",\n        authority: \"https://login.microsoftonline.com/common\",\n        redirectUri: \"/whatsnext/\"\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n        storeAuthStateInCookie: isIE || isEdge || isFirefox\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback: (level, message, containsPii) => {\n                if (containsPii) {\n                    return;\n                }\n                switch (level) {\n                    case LogLevel.Error:\n                        console.error(message);\n                        return;\n                    case LogLevel.Info:\n                        console.info(message);\n                        return;\n                    case LogLevel.Verbose:\n                        console.debug(message);\n                        return;\n                    case LogLevel.Warning:\n                        console.warn(message);\n                        return;\n                    default:\n                        return;\n                }\n            }\n        }\n    }\n};\n\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\nexport const loginRequest = {\n    scopes: [\"User.Read\", \"Calendars.Read\"]\n};\n\nconst d = new Date();\nd.setHours(0);\nd.setMinutes(0);\nd.setSeconds(0)\n\nconst start=d.toISOString();\n\nd.setDate(d.getDate() + 1)\n\nconst end=d.toISOString();\n\n// Add here the endpoints for MS Graph API services you would like to use.\nexport const graphConfig = {\n    graphMeEndpoint: `https://graph.microsoft.com/v1.0/me/calendar/calendarView?StartDateTime=${start}&EndDateTime=${end}`\n};","import { loginRequest, graphConfig } from \"../authConfig\";\nimport { msalInstance } from \"../index\";\n\nexport async function callMsGraph() {\n    const account = msalInstance.getActiveAccount();\n    if (!account) {\n        throw Error(\"No active account! Verify a user has been signed in and setActiveAccount has been called.\");\n    }\n\n    const response = await msalInstance.acquireTokenSilent({\n        ...loginRequest,\n        account: account\n    });\n\n    const headers = new Headers();\n    const bearer = `Bearer ${response.accessToken}`;\n\n    headers.append(\"Authorization\", bearer);\n\n    const options = {\n        method: \"GET\",\n        headers: headers\n    };\n\n    return fetch(graphConfig.graphMeEndpoint, options)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}","import React from 'react'\n\nconst _0 = (value) => {\n    return `${value}`.padStart(2, '0')\n}\n\nconst Event = ({event}) => {\n    const diffInSecs = Math.floor(event.startinfo.timeDiff / 1000)\n    const hours = Math.floor(diffInSecs /  3600 )\n    const minutes = Math.floor(diffInSecs / 60 - (hours * 60))\n    const seconds = Math.floor(diffInSecs - (hours * 3600) - (minutes * 60))\n\n    let timeRep = \"\";\n    if (diffInSecs < 0) {\n        timeRep = '~ past ~';\n    } else if (hours > 0) {\n        timeRep = `${hours}h ${_0(minutes)}m`;\n    } else if (minutes > 9) {\n        timeRep = `${minutes}m`;\n    } else {\n        timeRep = `${minutes}m ${_0(seconds)}s`;\n    }\n\n\n    return (\n        <li className=\"event\">\n            <span className=\"diff\">{timeRep}</span>\n            <span className=\"title\">{event.subject}</span>\n            <span className=\"time\">{event.startinfo.timeRep}</span>\n        </li>\n    )\n};\n\nexport default Event;","import React from 'react'\nimport { useEffect, useState } from \"react\";\n\nimport { useMsal } from \"@azure/msal-react\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nimport { callMsGraph } from \"../utils/MsGraphApiCall\";\nimport Event from \"./Event\";\n\nconst RELOAD_INTERVAL_IN_MINUTES = 1;\n\nconst loadAndPrepareData = async () => {\n    const graphData = await callMsGraph();\n    const events = (graphData && graphData.value) ? graphData.value : [];\n    events.sort((a, b) => a.start.dateTime.localeCompare(b.start.dateTime));\n    events.map(event => {\n        const date = new Date(event.start.dateTime+\"Z\")\n        const timeRep = `${date.getHours()}`.padStart(2, '0') + ':' +`${date.getMinutes()}`.padStart(2, '0')\n        event.startinfo = {date, timeRep}\n        return event;\n    });\n    console.log(\"events\", events);\n    return events;\n};\n\nconst Calendar = () => {\n    const { inProgress } = useMsal();\n    const [events, setEvents] = useState([]);\n    const [time, setTime] = useState(new Date().getTime());\n\n    useEffect(() => {\n        if (inProgress === InteractionStatus.None) {\n            loadAndPrepareData().then(events => {\n                setEvents(events);\n            });\n        }\n    }, [inProgress]);\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setTime(new Date().getTime());\n        }, 1000);\n        return () => {\n            console.log(\"Stopping timer\");\n            clearInterval(timer);\n        }\n    },[]);\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            if (inProgress === InteractionStatus.None) {\n                loadAndPrepareData().then(events => {\n                    setEvents(events);\n                });\n            }\n        }, RELOAD_INTERVAL_IN_MINUTES * 60 * 1000);\n        return () => {\n            console.log(\"Stopping timer\");\n            clearInterval(timer);\n        }\n    }, [inProgress]);\n\n    events.map(event => {\n        event.startinfo.timeDiff = event.startinfo.date - time;\n        return event;\n    });\n\n    let currentTime = new Date(time).toLocaleTimeString(\"en-GB\",{timeStyle: 'short'})\n    if ((Math.floor(time / 1000)) % 2 === 0) {\n        currentTime = currentTime.replace(\":\", \" \");\n    }\n\n    return (\n        <>\n            <div className=\"timeDisplay\">{currentTime}</div>\n            <ul>\n                {events.map(event => <Event key={event.id} event={event}/>)}\n            </ul>\n        </>\n    )\n\n}\n\nexport default Calendar;","import React from 'react'\nimport { useMsal } from \"@azure/msal-react\";\nimport Calendar from \"./components/Calendar\";\nimport { loginRequest } from \"./authConfig\";\n\nexport function App() {\n    const { instance, accounts, inProgress } = useMsal();\n    if (accounts.length > 0) {\n        return (\n            <Calendar />\n        )\n    } else if (inProgress === \"login\") {\n        return <div>Login is currently in progress!</div>\n    } else {\n        return (\n            <div>\n                <span>Please log in to view your upcoming events.</span>\n                <button onClick={() => instance.acquireTokenPopup(loginRequest)}>Login</button>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\nimport { msalConfig } from \"./authConfig\"\nimport './index.css';\nimport App from './App';\n\nSentry.init({\n    dsn: \"https://c42f3190b1094dd4b4dd426834da98c6@o108858.ingest.sentry.io/5662792\",\n    integrations: [new Integrations.BrowserTracing()],\n    tracesSampleRate: 1.0,\n});\n\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\nconst accounts = msalInstance.getAllAccounts();\nif (accounts.length > 0) {\n    msalInstance.setActiveAccount(accounts[0]);\n}\n\nmsalInstance.addEventCallback((event) => {\n    console.log(\"msalInstance event\", event)\n    if (event.eventType === EventType.LOGIN_SUCCESS && event.payload.account) {\n        const account = event.payload.account;\n        msalInstance.setActiveAccount(account);\n    }\n});\n\n// Component\nconst AppProvider = () => (\n    <MsalProvider instance={msalInstance}>\n        <App />\n    </MsalProvider>\n);\n\n\nReactDOM.render(<AppProvider />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}