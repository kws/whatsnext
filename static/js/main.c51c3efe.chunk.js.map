{"version":3,"sources":["authConfig.js","utils/MsGraphApiCall.js","components/calendar.js","App.js","index.js"],"names":["ua","window","navigator","userAgent","msie","indexOf","msie11","msedge","firefox","msalConfig","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","d","Date","setHours","setMinutes","setSeconds","start","toISOString","setDate","getDate","end","graphConfig","graphMeEndpoint","a","account","msalInstance","getActiveAccount","acquireTokenSilent","response","headers","Headers","bearer","accessToken","append","options","method","fetch","then","json","catch","log","Calendar","inProgress","useMsal","useState","graphData","setGraphData","useEffect","InteractionStatus","None","callMsGraph","events","value","sort","b","dateTime","localeCompare","map","event","toLocaleTimeString","subject","id","App","instance","accounts","length","onClick","logout","loginPopup","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","PublicClientApplication","getAllAccounts","setActiveAccount","addEventCallback","eventType","EventType","LOGIN_SUCCESS","payload","AppProvider","ReactDOM","render","document","getElementById"],"mappings":"2OAIMA,EAAKC,OAAOC,UAAUC,UACtBC,EAAOJ,EAAGK,QAAQ,SAClBC,EAASN,EAAGK,QAAQ,YACpBE,EAASP,EAAGK,QAAQ,SACpBG,EAAUR,EAAGK,QAAQ,WAMdI,EAAa,CACtBC,KAAM,CACFC,SAAU,uCACVC,UAAW,2CACXC,YAAa,eAEjBC,MAAO,CACHC,cAAe,iBACfC,uBAbKZ,EAAO,GAAKE,EAAS,GACnBC,EAAS,GACNC,EAAU,GAaxBS,OAAQ,CACJC,cAAe,CACXC,eAAgB,SAACC,EAAOC,EAASC,GAC7B,IAAIA,EAGJ,OAAQF,GACJ,KAAKG,IAASC,MAEV,YADAC,QAAQC,MAAML,GAElB,KAAKE,IAASI,KAEV,YADAF,QAAQG,KAAKP,GAEjB,KAAKE,IAASM,QAEV,YADAJ,QAAQK,MAAMT,GAElB,KAAKE,IAASQ,QAEV,YADAN,QAAQO,KAAKX,GAEjB,QACI,YAQXY,EAAe,CACxBC,OAAQ,CAAC,YAAa,mBAGpBC,EAAI,IAAIC,KACdD,EAAEE,SAAS,GACXF,EAAEG,WAAW,GACbH,EAAEI,WAAW,GAEb,IAAMC,EAAML,EAAEM,cAEdN,EAAEO,QAAQP,EAAEQ,UAAY,GAExB,IAAMC,EAAIT,EAAEM,cAGCI,EAAc,CACvBC,gBAAgB,2EAAD,OAA6EN,EAA7E,wBAAkGI,I,6FClE9G,oCAAAG,EAAA,yDACGC,EAAUC,EAAaC,mBAD1B,sBAGO1B,MAAM,6FAHb,uBAMoByB,EAAaE,mBAAb,2BAChBlB,GADgB,IAEnBe,QAASA,KARV,cAMGI,EANH,OAWGC,EAAU,IAAIC,QACdC,EAZH,iBAYsBH,EAASI,aAElCH,EAAQI,OAAO,gBAAiBF,GAE1BG,EAAU,CACZC,OAAQ,MACRN,QAASA,GAlBV,kBAqBIO,MAAMf,EAAYC,gBAAiBY,GACrCG,MAAK,SAAAT,GAAQ,OAAIA,EAASU,UAC1BC,OAAM,SAAArC,GAAK,OAAID,QAAQuC,IAAItC,OAvB7B,6C,iCCoCQuC,EA9BE,WAAO,IACZC,EAAeC,cAAfD,WADW,EAEeE,mBAAS,MAFxB,mBAEZC,EAFY,KAEDC,EAFC,KAInBC,qBAAU,WACFL,IAAeM,IAAkBC,MDXtC,WAAP,+BCYYC,GAAcb,MAAK,SAAAT,GAAQ,OAAIkB,EAAalB,QAEjD,CAACc,IAGJzC,QAAQuC,IAAI,YAAaK,GAEzB,IAAMM,EAAUN,GAAaA,EAAUO,MAASP,EAAUO,MAAQ,GAKlE,OAJAD,EAAOE,MAAK,SAAC9B,EAAG+B,GAAJ,OAAU/B,EAAEP,MAAMuC,SAASC,cAAcF,EAAEtC,MAAMuC,aAE7DtD,QAAQuC,IAAI,SAAUW,GAGlB,6BACKA,EAAOM,KAAI,SAAAC,GACR,OACI,+BAAoB,IAAI9C,KAAK8C,EAAM1C,MAAMuC,UAAUI,qBAAnD,MAA4ED,EAAME,UAAzEF,EAAMG,UCDpBC,MAzBR,WAAgB,IAAD,EACyBnB,cAAnCoB,EADU,EACVA,SAAUC,EADA,EACAA,SAAUtB,EADV,EACUA,WAI5B,OAFAzC,QAAQuC,IAAI,WAAYwB,GAEpBA,EAASC,OAAS,EAEd,qCACI,qDAAwBD,EAASC,OAAjC,wBACA,cAAC,EAAD,IACA,wBAAQC,QAAS,kBAAMH,EAASI,UAAhC,uBAGc,UAAfzB,EACA,mEAGH,qCACI,2EACA,wBAAQwB,QAAS,kBAAMH,EAASK,WAAW3D,IAA3C,uBCdhB4D,IAAY,CACRC,IAAK,4EACLC,aAAc,CAAC,IAAIC,IAAaC,gBAIhCC,iBAAkB,IAGf,IAAMjD,EAAe,IAAIkD,IAAwB1F,GAGlD+E,EAAWvC,EAAamD,iBAC1BZ,EAASC,OAAS,GAClBxC,EAAaoD,iBAAiBb,EAAS,IAG3CvC,EAAaqD,kBAAiB,SAACpB,GAE3B,GADAzD,QAAQuC,IAAI,qBAAsBkB,GAC9BA,EAAMqB,YAAcC,IAAUC,eAAiBvB,EAAMwB,QAAQ1D,QAAS,CACtE,IAAMA,EAAUkC,EAAMwB,QAAQ1D,QAC9BC,EAAaoD,iBAAiBrD,OAUtC,IAAM2D,EAAc,kBAChB,cAAC,IAAD,CAAcpB,SAAUtC,EAAxB,SACI,cAAC,EAAD,OAKR2D,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.c51c3efe.chunk.js","sourcesContent":["import { LogLevel } from \"@azure/msal-browser\";\n// Browser check variables\n// If you support IE, our recommendation is that you sign-in using Redirect APIs\n// If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\nconst ua = window.navigator.userAgent;\nconst msie = ua.indexOf(\"MSIE \");\nconst msie11 = ua.indexOf(\"Trident/\");\nconst msedge = ua.indexOf(\"Edge/\");\nconst firefox = ua.indexOf(\"Firefox\");\nconst isIE = msie > 0 || msie11 > 0;\nconst isEdge = msedge > 0;\nconst isFirefox = firefox > 0; // Only needed if you need to support the redirect flow in Firefox incognito\n\n// Config object to be passed to Msal on creation\nexport const msalConfig = {\n    auth: {\n        clientId: \"212b434a-82b7-43bb-b48d-c8921a2e939d\",\n        authority: \"https://login.microsoftonline.com/common\",\n        redirectUri: \"/whatsnext/\"\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n        storeAuthStateInCookie: isIE || isEdge || isFirefox\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback: (level, message, containsPii) => {\n                if (containsPii) {\n                    return;\n                }\n                switch (level) {\n                    case LogLevel.Error:\n                        console.error(message);\n                        return;\n                    case LogLevel.Info:\n                        console.info(message);\n                        return;\n                    case LogLevel.Verbose:\n                        console.debug(message);\n                        return;\n                    case LogLevel.Warning:\n                        console.warn(message);\n                        return;\n                    default:\n                        return;\n                }\n            }\n        }\n    }\n};\n\n// Add here scopes for id token to be used at MS Identity Platform endpoints.\nexport const loginRequest = {\n    scopes: [\"User.Read\", \"Calendars.Read\"]\n};\n\nconst d = new Date();\nd.setHours(0);\nd.setMinutes(0);\nd.setSeconds(0)\n\nconst start=d.toISOString();\n\nd.setDate(d.getDate() + 1)\n\nconst end=d.toISOString();\n\n// Add here the endpoints for MS Graph API services you would like to use.\nexport const graphConfig = {\n    graphMeEndpoint: `https://graph.microsoft.com/v1.0/me/calendar/calendarView?StartDateTime=${start}&EndDateTime=${end}`\n};","import { loginRequest, graphConfig } from \"../authConfig\";\nimport { msalInstance } from \"../index\";\n\nexport async function callMsGraph() {\n    const account = msalInstance.getActiveAccount();\n    if (!account) {\n        throw Error(\"No active account! Verify a user has been signed in and setActiveAccount has been called.\");\n    }\n\n    const response = await msalInstance.acquireTokenSilent({\n        ...loginRequest,\n        account: account\n    });\n\n    const headers = new Headers();\n    const bearer = `Bearer ${response.accessToken}`;\n\n    headers.append(\"Authorization\", bearer);\n\n    const options = {\n        method: \"GET\",\n        headers: headers\n    };\n\n    return fetch(graphConfig.graphMeEndpoint, options)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}","import React from 'react'\nimport { useEffect, useState } from \"react\";\n\nimport { useMsal } from \"@azure/msal-react\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nimport { callMsGraph } from \"../utils/MsGraphApiCall\";\n\n\nconst Calendar = () => {\n    const { inProgress } = useMsal();\n    const [graphData, setGraphData] = useState(null);\n\n    useEffect(() => {\n        if (inProgress === InteractionStatus.None) {\n            callMsGraph().then(response => setGraphData(response));\n        }\n    }, [inProgress]);\n\n\n    console.log(\"GraphData\", graphData);\n\n    const events = (graphData && graphData.value) ? graphData.value : [];\n    events.sort((a, b) => a.start.dateTime.localeCompare(b.start.dateTime))\n\n    console.log(\"events\", events);\n\n    return (\n        <ul>\n            {events.map(event => {\n                return (\n                    <li key={event.id}>{new Date(event.start.dateTime).toLocaleTimeString()} - {event.subject}</li>\n                )\n            })}\n        </ul>\n    )\n\n}\n\nexport default Calendar;","import React from 'react'\nimport { useMsal } from \"@azure/msal-react\";\nimport Calendar from \"./components/calendar\";\nimport { loginRequest } from \"./authConfig\";\n\nexport function App() {\n    const { instance, accounts, inProgress } = useMsal();\n\n    console.log(\"Accounts\", accounts)\n\n    if (accounts.length > 0) {\n        return (\n            <>\n                <p>There are currently {accounts.length} users signed in! </p>\n                <Calendar />\n                <button onClick={() => instance.logout()}>Logout</button>\n            </>\n        )\n    } else if (inProgress === \"login\") {\n        return <span>Login is currently in progress!</span>\n    } else {\n        return (\n            <>\n                <span>There are currently no users signed in!</span>\n                <button onClick={() => instance.loginPopup(loginRequest)}>Login</button>\n            </>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication, EventType } from \"@azure/msal-browser\";\nimport { msalConfig } from \"./authConfig\"\nimport './index.css';\nimport App from './App';\n\nSentry.init({\n    dsn: \"https://c42f3190b1094dd4b4dd426834da98c6@o108858.ingest.sentry.io/5662792\",\n    integrations: [new Integrations.BrowserTracing()],\n\n    // We recommend adjusting this value in production, or using tracesSampler\n    // for finer control\n    tracesSampleRate: 1.0,\n});\n\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\n// Account selection logic is app dependent. Adjust as needed for different use cases.\nconst accounts = msalInstance.getAllAccounts();\nif (accounts.length > 0) {\n    msalInstance.setActiveAccount(accounts[0]);\n}\n\nmsalInstance.addEventCallback((event) => {\n    console.log(\"msalInstance event\", event)\n    if (event.eventType === EventType.LOGIN_SUCCESS && event.payload.account) {\n        const account = event.payload.account;\n        msalInstance.setActiveAccount(account);\n    }\n//     else if (event.error) {\n//\n//         msalInstance.acquireTokenPopup()\n//         this.broadcastService.broadcast(\"msal:notAuthorized\", err.message);\n// }\n    });\n\n// Component\nconst AppProvider = () => (\n    <MsalProvider instance={msalInstance}>\n        <App />\n    </MsalProvider>\n);\n\n\nReactDOM.render(<AppProvider />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}